<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
	<welcome-file-list>
	  <welcome-file>index.jsp</welcome-file>
	</welcome-file-list>
	<!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
	<!-- root-context.xml을 정의  -->
	<!-- 여기에 등록된 설정 파일에 따라 등록된 Bean들은 모두 공유가 가능하다.  -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/spring/root-context.xml</param-value>
	</context-param>
	<!-- 리스너로써 root-context.xml에 정의 되어있는 것들을 모든 서블릿과 필터가 공유할 수 있게 해준다  -->
	<!-- Controller가 공유하는Bean들을 포함하는 Spring Container를 생성  -->
	<!-- 공유하는 Bean: Dao, DataSource, Service  -->
	<!-- Bean이란? Spring Container 관리하는 자바객체를 Bean이라고 한다.  -->
	<!-- 원래 객체를 생성하려면 Class를 생성하고 new를 입력하여 원하는 객체를 생성했었지만  -->
	<!-- Spring에서는 직접 new로 객체를 생성하는게 아닌, Spring에 의하여 관리당하는 자바객체를 사용  -->
	<!-- 그래서 Spring에 의해 생성되고 관리되는 자바 객체를 "Bean" 이라고 한다  -->
	<!-- Creates the Spring Container shared by all Servlets and Filters -->
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- Spring Container를 생성한다. -->
	<!-- 클라이언트의 요청을 처음으로 받는 클래스 -->
	<!-- 클라이언트의 요청을 Handler(Controller)에 보낸다. -->
	<!-- Processes application requests -->
	<servlet>
		<servlet-name>appServlet</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<init-param>
		<!-- contextLoader가 해당 위치의 설정 파일을 읽어, 해당 파일을 dispatcher servlet으로 만듬. -->
			<param-name>contextConfigLocation</param-name>
			<param-value>/WEB-INF/spring/appServlet/servlet-context.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	
	<!-- .do로 시작하는 url요청을 받아 appServlet에서 처리한다. -->
	<servlet-mapping>
		<servlet-name>appServlet</servlet-name>
		<url-pattern>*.do</url-pattern>
	</servlet-mapping>
		<!-- 필터 정의 -->
		<!-- 인코딩을 UTF-8로 설정하여 필터링하겠다.  -->
	<filter>
	  <filter-name>EncodingFilter</filter-name>
	  <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	  <init-param>
	    <param-name>encoding</param-name>
	    <param-value>UTF-8</param-value>
	  </init-param>
	</filter>
	 
	<!-- 필터 맵핑 /* 는 모든 경로의 파일을 말한다. -->
	<filter-mapping>
	  <filter-name>EncodingFilter</filter-name>
	  <url-pattern>/*</url-pattern>
	</filter-mapping>

	<error-page>
		<error-code>404</error-code>
		<location>/errorPage.do</location>
	</error-page>
	<error-page>
		<error-code>405</error-code>
		<location>/errorPage.do</location>
	</error-page>
	<error-page>
		<error-code>500</error-code>
		<location>/errorPage.do</location>
	</error-page>
</web-app>
